{"version":3,"sources":["components/CardList/CardList.style.ts","components/Card/Card.style.ts","components/Card/Card.tsx","components/CardList/CardList.tsx","components/SearchBar/SearchBar.style.ts","components/SearchBar/SearchBar.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["useStyles","makeStyles","cardList","padding","display","gridTemplateColumns","gap","cardItem","borderRadius","boxShadow","backgroundColor","transform","transition","cursor","width","classesCardItemTitle","textAlign","textTransform","fontWeight","marginBottom","color","Card","data","classes","className","name","src","image","alt","CardList","props","characters","length","map","character","id","searchBar","justifyContent","margin","SearchBar","handleChange","placeholder","useState","value","setValue","type","onChange","e","target","App","filteredCharacters","setData","useEffect","fetch","then","response","json","results","style","fontFamily","fontSize","s","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wMAEaA,EAAYC,YAAW,CAChCC,SAAU,CACNC,QAAS,OACVC,QAAS,OACRC,oBAAqB,kBACrBC,IAAK,SCLAN,EAAYC,YAAW,CAChCM,SAAU,CACNC,aAAc,OACdC,UAAW,uBACXN,QAAS,OACTO,gBAAiB,QACjBC,UAAW,gBACXC,WAAY,0BACZC,OAAQ,UACR,UAAW,CACPF,UAAW,eAEf,QAAS,CACLG,MAAO,OACPN,aAAc,QAGtBO,qBAAsB,CAClBC,UAAW,SACXC,cAAe,YACfC,WAAY,IACZf,QAAS,SACTgB,aAAc,OACdC,MAAO,OACPV,gBAAiB,aACjBF,aAAc,U,OCXPa,EAVF,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,KACLC,EAAUvB,IAChB,OACI,sBAAKwB,UAAWD,EAAQhB,SAAxB,UACI,qBAAKiB,UAAWD,EAAQR,qBAAxB,SAA+CO,EAAKG,OACpD,qBAAKC,IAAKJ,EAAKK,MAAOC,IAAI,aCOvBC,EAbE,SAACC,GAA4D,IACnEC,EAAcD,EAAdC,WACDR,EAAUvB,IAChB,OACI,qBAAKwB,UAAWD,EAAQrB,SAAxB,SACM6B,EAAWC,OACPD,EAAWE,KAAI,SAACC,GAAD,OAA0B,cAAC,EAAD,CAAyBZ,KAAMY,GAApBA,EAAUC,OAC9D,oDCVLnC,EAAYC,YAAW,CAChCmC,UAAW,CACPhC,QAAS,OACTiC,eAAgB,eAChBvB,MAAO,QACPwB,OAAQ,SACRnC,QAAS,OACT,YAAa,CACTA,QAAS,aCoBNoC,EAtBG,SAAC,GAAyC,IAAxCC,EAAuC,EAAvCA,aAAcC,EAAyB,EAAzBA,YAExBlB,EAAUvB,IAFuC,EAI7B0C,mBAAS,IAJoB,mBAIhDC,EAJgD,KAIzCC,EAJyC,KAWvD,OACI,qBAAKpB,UAAWD,EAAQa,UAAxB,SACI,uBACIS,KAAK,SAASJ,YAAaA,GAAe,GAC1CE,MAAOA,EACPG,SAAU,SAACC,GAAD,OAVL,SAACJ,GACdH,EAAaG,GACbC,GAAS,kBAAMD,KAQyCG,CAASC,EAAEC,OAAOL,aCiBnEM,EA/BH,WAAO,IAAD,EAEUP,mBAAiB,CACrCX,WAAY,GACZmB,mBAAoB,KAJV,mBAEP5B,EAFO,KAED6B,EAFC,KAOdC,qBAAU,WACNC,MAAM,6CACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAhC,GAAI,OAAI6B,GAAQ,iBAAO,CAACpB,WAAYT,EAAKmC,QAASP,mBAAoB5B,EAAKmC,iBACtF,IAWH,OACI,qCACI,oBAAIC,MAAO,CAAC1C,UAAW,SAAU2C,WAAY,gBAAiBC,SAAU,QAAxE,oCACA,cAAC,EAAD,CAAWpB,aAZM,SAACqB,GACtBR,MAAM,mDAAD,OAAoDQ,IACpDP,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAhC,GAAS,IAAD,GACN,OAAJA,QAAI,IAAJA,GAAA,UAAAA,EAAMmC,eAAN,eAAezB,QAASmB,GAAQ,iBAAO,CAACD,mBAAoB5B,EAAKmC,YAAaN,GAAQ,iBAAO,CAACD,mBAAoB,WAQ3ET,YAAa,mBACxD,cAAC,EAAD,CAAUV,WAAYT,EAAK4B,yBCtBxBY,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBV,MAAK,YAAkD,IAA/CW,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.187a746b.chunk.js","sourcesContent":["import { makeStyles } from '@material-ui/core/styles';\r\n\r\nexport const useStyles = makeStyles({\r\n    cardList: {\r\n        padding: '1rem',\r\n       display: 'grid',\r\n        gridTemplateColumns: '1fr 1fr 1fr 1fr',\r\n        gap: '5vw'\r\n    },\r\n});","import { makeStyles } from '@material-ui/core/styles';\r\n\r\nexport const useStyles = makeStyles({\r\n    cardItem: {\r\n        borderRadius: '1rem',\r\n        boxShadow: '0.2rem 0.2rem 0.5rem',\r\n        padding: '1rem',\r\n        backgroundColor: 'white',\r\n        transform: 'translateZ(0)',\r\n        transition: 'transform 0.3s ease-out',\r\n        cursor: 'pointer',\r\n        '&:hover': {\r\n            transform: 'scale(1.05)'\r\n        },\r\n        '& img': {\r\n            width: '100%',\r\n            borderRadius: '50%',\r\n        }\r\n    },\r\n    classesCardItemTitle: {\r\n        textAlign: 'center',\r\n        textTransform: 'uppercase',\r\n        fontWeight: 800,\r\n        padding: '0.5rem',\r\n        marginBottom: '1rem',\r\n        color: 'grey',\r\n        backgroundColor: 'whitesmoke',\r\n        borderRadius: '2rem'\r\n    }\r\n});","import React from 'react';\r\nimport {ICharacter} from \"../../models/character\";\r\nimport {useStyles} from \"./Card.style\";\r\ninterface IProps {\r\n    data: ICharacter\r\n}\r\nconst Card = ({data}:IProps) => {\r\n    const classes = useStyles();\r\n    return (\r\n        <div className={classes.cardItem}>\r\n            <div className={classes.classesCardItemTitle}>{data.name}</div>\r\n            <img src={data.image} alt=\"char\"/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Card;","import React from 'react';\r\nimport {ICharacter} from \"../../models/character\";\r\nimport {useStyles} from \"./CardList.style\";\r\nimport Card from \"../Card/Card\";\r\n\r\nconst CardList = (props: { characters: ICharacter[], children?: string }) => {\r\n    const {characters} = props;\r\n    const classes = useStyles();\r\n    return (\r\n        <div className={classes.cardList}>\r\n            { characters.length\r\n                ? characters.map((character:ICharacter) => <Card key={character.id} data={character}/>)\r\n                : <div> No data found</div>\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CardList;","import { makeStyles } from '@material-ui/core/styles';\r\n\r\nexport const useStyles = makeStyles({\r\n    searchBar: {\r\n        display: \"flex\",\r\n        justifyContent: 'space-around',\r\n        width: '400px',\r\n        margin: '0 auto',\r\n        padding: '1rem',\r\n        '& > input': {\r\n            padding: '0.5rem'\r\n        }\r\n    }\r\n});","import React, {ChangeEvent, useState} from 'react';\r\nimport {useStyles} from \"./SearchBar.style\";\r\n\r\ninterface IProps {\r\n    handleChange: Function;\r\n    placeholder: string;\r\n}\r\n\r\nconst SearchBar = ({handleChange, placeholder}: IProps) => {\r\n\r\n    const classes = useStyles();\r\n\r\n    const [value, setValue] = useState('');\r\n\r\n    const onChange = (value: string) => {\r\n        handleChange(value);\r\n        setValue(() => value)\r\n    }\r\n\r\n    return (\r\n        <div className={classes.searchBar}>\r\n            <input\r\n                type=\"search\" placeholder={placeholder || ''}\r\n                value={value}\r\n                onChange={(e: ChangeEvent<HTMLInputElement>) => onChange(e.target.value)}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SearchBar;","import React, {useEffect, useState} from 'react';\nimport {ICharacter} from \"./models/character\";\nimport CardList from \"./components/CardList/CardList\";\nimport SearchBar from \"./components/SearchBar/SearchBar\";\n\ninterface IProps {\n    characters?: Array<ICharacter>;\n    filteredCharacters: Array<ICharacter>;\n}\n\nconst App = () => {\n\n    const [data, setData] = useState<IProps>({\n        characters: [],\n        filteredCharacters: [],\n    })\n\n    useEffect(() => {\n        fetch('https://rickandmortyapi.com/api/character')\n            .then(response => response.json())\n            .then(data => setData(() => ({characters: data.results, filteredCharacters: data.results})))\n    }, [])\n\n    const filterCharacters = (s: string) => {\n        fetch(`https://rickandmortyapi.com/api/character/?name=${s}`)\n            .then(response => response.json())\n            .then(data => {\n                data?.results?.length ? setData(() => ({filteredCharacters: data.results})) : setData(() => ({filteredCharacters: []}))\n            })\n    };\n\n\n    return (\n        <>\n            <h1 style={{textAlign: 'center', fontFamily: 'Bigelow Rules', fontSize: '75px'}}> Rick and Morty Fandom</h1>\n            <SearchBar handleChange={filterCharacters} placeholder={'Find character'}/>\n            <CardList characters={data.filteredCharacters}/>\n        </>\n    );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}